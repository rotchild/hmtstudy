// Generated by CoffeeScript 1.7.1

/*
    服务端生成excel类
 */

(function() {
  var Xlsx, errors, fs, logger, nodexlsx, os, path, settings;

  nodexlsx = require('node-xlsx');

  //logger = require('../libs/logger.js')('xlsx.js');

  fs = require('fs');

  settings = require('../../settings');

  path = require('path');

  errors = require('../libs/errMark.js');

  os = require('os');

  Function.prototype.property = function(prop, desc) {
    return Object.defineProperty(this.prototype, prop, desc);
  };

  Xlsx = (function() {
    Xlsx.prototype._excelTemplate = '.xlsx';

    Xlsx.prototype._EXCELDIR = '/excel/';

    Xlsx.prototype._TIMEINTERVAL = 30 * 60 * 1000;

    function Xlsx(fileName) {
      this.fileName = fileName;
      this.errMsg = '';
    }

    Xlsx.property('fullName', {
      get: function() {
        return "" + this.fileName + this._excelTemplate;
      },
      set: function(name) {
        var _ref;
        return _ref = name.split('.'), this.fileName = _ref[0], _ref;
      }
    });

    Xlsx.property('fullPath', {
      get: function() {
        if (os.type() === 'Windows_NT') {
          return "" + settings.excelDir + '\\' + this.fullName;
        } else {
          return "" + settings.excelDir + '/' + this.fullName;
        }
      },
      set: function(path) {
        var _ref, _ref1;
        if (os.type() === 'Windows_NT') {
          return _ref = path.split('\\'), this.dir = _ref[0], this.fullName = _ref[1], _ref;
        } else {
          return _ref1 = path.split('/'), this.dir = _ref1[0], this.fullName = _ref1[1], _ref1;
        }
      }
    });

    Xlsx.prototype._isValidFileName = function(filename) {
      if (filename.length < 0 || filename.length > 255) {
        return false;
      } else {
        return filename.match(/^[^\\\/:\*\?\|"<>]+$/);
      }
    };


    /*
        创建文件
        @content 文件内容
        @excelDir 文件路径
        @fullPath 传递完整的文件路径
        @callback 回调返回结果
     */

    Xlsx.prototype._createFile = function(content, excelDir, fullPath, callback) {
      if (!fs.existsSync(excelDir)) {
        return fs.mkdir(excelDir, parseInt("0777"), function(err) {
          if (err) {
            return callback(err, null);
          } else {
            return fs.writeFile(fullPath, content, 'binary', function(err) {
              if (err) {
                return callback(err, null);
              } else {
                return callback(null, true);
              }
            });
          }
        });
      } else {
        //logger.log('debug', 'fullPath:' + fullPath);
        return fs.writeFile(fullPath, content, 'binary', function(err) {
          if (err) {
            return callback(err, null);
          } else {
            return callback(null, true);
          }
        });
      }
    };


    /*
        生成excel文件在30分钟内未被下载即从服务端删除
        setTimeout当服务器在30分钟内中止服务再恢复后要重新记录时间
        @filename excel文件名
        @callback 回调结果
     */

    Xlsx.prototype._deleteFile = function(fullPath, callback) {
      var timeoutId;
      return timeoutId = setTimeout(((function(_this) {
        return function() {
          if (fs.existsSync(fullPath)) {
            return fs.unlink(fullPath, function(err) {
              if (err) {
                return callback(err, null);
              } else {
                return callback(null, true);
              }
            });
          }
        };
      })(this)), this._TIMEINTERVAL);
    };


    /*
        createExcel 生成excel文件
        @worksheet 生成数组
         例如:["A1", "B1"],[{"value":"A2","formatCode":"General"},{"value":"B2","formatCode":"General"}]
        @callback 回调结果
        return callback(err,path) err:错误 path:下载路径(相对路径)
     */

    Xlsx.prototype.createExcel = function(worksheet, callback) {
      var content, result;
      result = {
        "worksheets": [
          {
            "name": "mySheetName",
            "data": worksheet
          }
        ]
      };
      content = nodexlsx.build(result);
      //logger.log('debug', "fullname:" + this.fullName);
      //logger.log('debug', "valid:" + this._isValidFileName(this.fullName));
      if (this._isValidFileName(this.fullName) === false) {
        return callback(errors.FileNameLength, null);
      } else {
        if (this._isValidFileName(this.fullName) === null) {
          return callback(errors.InvalidFileName, null);
        } else {
          return this._createFile(content, settings.excelDir, this.fullPath, (function(_this) {
            return function(err, result) {
              var downloadurl;
              //logger.log('debug', 'result:' + result);
              if (err) {
                return callback(err, null);
              } else {
                if (result === true) {
                  downloadurl = _this._EXCELDIR + _this.fullName;
                  _this._deleteFile(_this.fullPath, function(err, result) {
                    if (result === true) {
                      return null;//logger.log('debug', 'fs delete success');
                    } else {
                      return callback(err, result);
                    }
                  });
                  return callback(null, downloadurl);
                }
              }
            };
          })(this));
        }
      }
    };

    return Xlsx;

  })();

  module.exports = Xlsx;

}).call(this);

//# sourceMappingURL=xlsx.map
